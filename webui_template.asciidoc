== Web UI

=== Using a Dart expression inside HTML

==== Problem

You want to inject the value of a Dart expression in your markup.

==== Solution

Place the Dart expression within `{{ }}`. At runtime, the Web UI framework
evaluates the expression, and injects the result into the HTML.  Commonly used
Dart expressions include identifiers, method and function calls, getters, string
interpolation, and raw strings:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <ul>
      <li>Using identifiers: var x = {{x}} and var y = {{y}}</li>
      <li>Calling a method: {{x}} in hex is {{x.toRadixString(16)}}</li>
      <li>Calling functions: (x ~/ y) = {{intDivision()}} and (x / y) = 
        {{doubleDivision().toStringAsPrecision(4)}}</li>
      <li>Using a getter: {{cityNameAsChars}}</li>
      <li>Using string interpolation: {{'city = ${city.toUpperCase()}'}}</li>
      <li>Using a raw string: {{r'$city'}}</li>
    </ul>

    <script type="application/dart">
      import 'package:web_ui/web_ui.dart';

      num x = 32;
      num y = 3;
      String city = 'Boston';
      
      int intDivision() => x ~/ y;
      double doubleDivision() => x / y;
      
      List<String> get cityNameAsChars => city.split(''); 

      void main() {}
    </script>
  </body>
</html>
--------------------------------------------------------------------------------

Building and running the above code displays the following in the browser:

--------------------------------------------------------------------------------
Using identifiers: var x = 32 and var y = 3
Calling a method: 32 in hex is 20
Calling functions: (x ~/ y) = 10 and (x / y) = 10.67
Using a getter: [B, o, s, t, o, n]
Using string interpolation: city = BOSTON
Using a raw string: $city
--------------------------------------------------------------------------------

The expression interpolation shown in the code above creates a _static_ binding
between a Dart variable and its representation in the UI. When the page loads,
all expressions inside `{{ }}` are evaluated. If the evaluated variable's value
changes later on, the UI does not automatically update.

We will look at how we can make the binding between Dart variables and the UI
live in other recipes in this chapter.


=== Observing a Dart variable for changes

==== Problem

You want to sync a variable and its display. Every time the variable's value
changes, you want its display to automatically change. You want this to happen
without a page refresh, and without having to do any manual DOM manipulation.

==== Solution

Add an `@observable` declaration right before you define the variable:

--------------------------------------------------------------------------------
@observable 
var myVar;
--------------------------------------------------------------------------------

Then, put that variable within `{{ }}` in the HTML:

--------------------------------------------------------------------------------
<li>The value is {{myVar}}</li>
--------------------------------------------------------------------------------

This creates a dynamic binding between that variable and its display in the UI.
If the variable's value changes, the UI updates automatically.

==== Example

Imagine you have a collection of movie quotes, and you want to display them on
a web page one by one in slideshow fashion.

Begin by creating a collection of quotes. Then, define a variable to store the
current quote, and make that variable observable:

--------------------------------------------------------------------------------
class Quote {
  final String quote, saidBy; 
  Quote(this.quote, this.saidBy);
}

List<Quote> quotes = [ ... ];

@observable 
Quote currentQuote;
--------------------------------------------------------------------------------
  
Wrap the observable variable inside `{{ }}` in the UI to get its value:

--------------------------------------------------------------------------------
<div><em>{{currentQuote.quote}}</em> - {{currentQuote.saidBy}}</div>
--------------------------------------------------------------------------------

Now, cycle through the collection of quotes, picking a new quote every few
seconds:

--------------------------------------------------------------------------------
var i = 0;
currentQuote = quotes[i];

new Timer.periodic(new Duration(seconds: 2), (_) {
  i = (i == quotes.length - 1) ? 0 : i + 1;
  currentQuote = quotes[i];
});
--------------------------------------------------------------------------------

The quote displayed on the page changes as the observable variable's value
changes. The rest of the page remains the same, and you don't have to modify
the page's markup!

Here is the entire script:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
  <body>
    <div><em>{{currentQuote.quote}}</em> - {{currentQuote.saidBy}}</div>
  
    <script type="application/dart">
      
      import 'dart:async';
      import 'package:web_ui/web_ui.dart';
      
      class Quote {
        final String quote, saidBy; 
        Quote(this.quote, this.saidBy);
      }
      
      @observable 
      Quote currentQuote;
        
      void main() {
        List<Quote> quotes = [
          new Quote('This agression will not stand, man.', 'The Dude'),
          new Quote('You are entering a world of pain', 'Walter'),
          new Quote('The rug really tied the room together.', 'The Dude'),
          new Quote('Sometimes you get the bar, sometimes the bar gets you.',
          'The Stranger'),
          new Quote('Mark it zero, dude', 'Walter')
        ];
            
        var i = 0;
        currentQuote = quotes[i];
         
        new Timer.periodic(new Duration(seconds: 2), (_) {
          i = (i == quotes.length - 1) ? 0 : i + 1;
          currentQuote = quotes[i];
        });
      }   
    </script>
  </body>
</html>
--------------------------------------------------------------------------------


=== Creating a bidirectional binding using text elements

==== Problem

You are using a text field (text input or textarea) to set the value of a Dart
variable. You want that variable to be modified in real time, without a page
refresh.

==== Solution

First, make the variable observable:

--------------------------------------------------------------------------------
@observable
var myVar = value;
--------------------------------------------------------------------------------

Then, bind a text input or a textarea to that variable using 'bind-value=' syntax:

--------------------------------------------------------------------------------
<input type='text' bind-value='myVar'>
<textarea bind-value='myVar'></textarea>
--------------------------------------------------------------------------------

This creates a bi-directional binding: changing the variable's value updates 
the UI, and changing the UI updates the variable's value.

==== Example

You've started micro-blogging. You have a webpage where you display one of your
posts, along with a simple textarea to edit that post. You're restricting
yourself to 140 characters, and want the UI to tell you how many characters
you have remaining when you type.

To enable real-time editing of a post, make the post variable observable:

--------------------------------------------------------------------------------
@observable
var post = 'This is my very first post about Dart, and the' + 
           ' only thing I have to say is ...it is awesome!!!';
--------------------------------------------------------------------------------

Use `{{ }}` syntax for displaying the post and its length:

--------------------------------------------------------------------------------
<p>{{post}}</p>
<p><em>Post Length:</em>  {{post.length}}</p>
--------------------------------------------------------------------------------

Then, create the binding in the textarea for editing the post (along with a
tracker that tells you how many characters you have remaining):

--------------------------------------------------------------------------------
<textarea rows='4' cols='40' bind-value="post"></textarea>
<p><em>Chars remaining:</em> {{MAXLENGTH - post.length}}</p> 
--------------------------------------------------------------------------------

That's it, you're done!

By sprinkling a few declarative statements in your code, you get to enjoy all
the functionality that bi-directional binding gives you:

* You need to do nothing to make the textarea sticky: it automatically contains
the post text.
* Modifying the post in the textarea changes the post object in real
time. There is no DOM manipulation required.
* By observing the post object, you get to observe its attributes (in this
case, the `length` property) for free.

Here is the entire script:

--------------------------------------------------------------------------------
<!DOCTYPE html>

<html>
<body>
  <h3>Post</h3>
  <p>{{post}}</p>
  <p><em>Post Length:</em>  {{post.length}}</p>

  <p>
    <em>Edit Post:</em><br>
    <textarea rows='4' cols='40' bind-value="post"></textarea>
  </p>
  <p><em>Chars remaining:</em> {{MAXLENGTH - post.length}}</p>

  <script type="application/dart">
    import 'package:web_ui/web_ui.dart';

    @observable
    var post = 'This is my very first post about Dart, and the' + 
               ' only thing I have to say is ...it is awesome!!!';
    const num MAXLENGTH = 140;

    main() {}

  </script>
</body>
</html>
--------------------------------------------------------------------------------


